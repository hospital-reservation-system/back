{"version":3,"file":"selectProduct.service.js","sourceRoot":"","sources":["../../../../src/api/selectProduct/service/selectProduct.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from '@/api/common/exceptions/http.exception';\r\nimport mongoose from \"mongoose\";\r\nimport { SelectProductRepository } from '@/api/selectProduct/repository/selectProduct.repository';\r\nimport { AdminRepository } from '@/api/admin/repository/admin.repository';\r\nimport { SelectProductService } from '@/api/selectProduct/service/selectProduct.service.type';\r\nimport { ObjectId } from 'mongodb';\r\n// import { SelectProductResponseDTO } from '@/api/selectProduct/dto/selectProductResponse.dto';\r\n// import { GetSelectProductResponseDTO } from '@/api/selectProduct/dto/getSelectProductResponse.dto';\r\n// import { GetSelectProductsResponseDTO } from '@/api/selectProduct/dto/getSelectProductsResponse.dto';\r\n\r\nexport class SelectProductServiceImpl implements SelectProductService {\r\n    constructor(\r\n        private readonly _selectProductRepository: SelectProductRepository,\r\n        private readonly _adminRepository: AdminRepository,\r\n    ) {}\r\n\r\n    async createSelectProduct(\r\n        product: Omit<ISelectProduct, \"id\">\r\n      ): Promise<ISelectProduct> {\r\n        const newProduct: ISelectProduct = {\r\n          name: product.name,\r\n          price: product.price,\r\n          description: product.description,\r\n        };\r\n      \r\n        const savedProduct = await this._selectProductRepository.save(newProduct);\r\n      \r\n        const allAdmins = await this._adminRepository.findAll();\r\n      \r\n        await Promise.all(\r\n          allAdmins.map(async (admin) => {\r\n            const updatedSelectProducts = admin.selectProducts\r\n              ? admin.selectProducts.concat(savedProduct)\r\n              : [savedProduct];\r\n      \r\n            await this._adminRepository.update(admin.id, { selectProducts: updatedSelectProducts });\r\n          })\r\n        );\r\n      \r\n        return savedProduct;\r\n      }\r\n\r\n    async getSelectProducts(): Promise<ISelectProduct[]> {\r\n        const selectProducts = await this._selectProductRepository.findAll();\r\n\r\n        // const newList = await Promise.all(\r\n        //     selectProducts.map((selectProduct)=>new GetSelectProductsResponseDTO(selectProduct))\r\n        // );\r\n\r\n        return selectProducts;\r\n    }\r\n\r\n    async getSelectProduct(selectProductId: string): Promise<ISelectProduct | null> {\r\n        const selectProduct = await this._selectProductRepository.findById(selectProductId);\r\n\r\n        if(!selectProduct) {\r\n            throw new HttpException(404, \"선택 상품 정보 조회 실패\");\r\n        }\r\n\r\n        // const selectProductList = await new GetSelectProductResponseDTO(selectProduct);\r\n\r\n        return selectProduct;\r\n    }\r\n\r\n    async updateSelectProduct(selectProductId: string, params: Partial<Omit<ISelectProduct, \"_id\">>): Promise<void> {\r\n        const findSelectProduct = await this._selectProductRepository.findById(selectProductId);\r\n        \r\n        if(!findSelectProduct) {\r\n            throw new HttpException(404, \"선택 상품 정보 조회 실패\");\r\n        }\r\n        \r\n        await this._selectProductRepository.update(selectProductId, params);\r\n\r\n        return;\r\n    }\r\n\r\n    async deleteSelectProduct(selectProductId: string): Promise<void> {\r\n        // 1. 선택 상품 삭제\r\n        await this._selectProductRepository.delete(selectProductId);\r\n      \r\n        // 2. 모든 관리자 가져오기\r\n        const allAdmins = await this._adminRepository.findAll();\r\n      \r\n        // 3. 모든 관리자에서 선택 상품 목록 업데이트\r\n        await Promise.all(\r\n          allAdmins.map(async (admin) => {\r\n            const updatedSelectProducts = (admin.selectProducts || []).filter(\r\n              (p) => {\r\n                return new ObjectId(p.id).toString() !== new ObjectId(selectProductId).toString();\r\n              }\r\n            );\r\n      \r\n            // 관리자의 선택 상품 목록 업데이트\r\n            await this._adminRepository.update(admin.id, { selectProducts: updatedSelectProducts });\r\n          })\r\n        );\r\n      }\r\n\r\n}"]}