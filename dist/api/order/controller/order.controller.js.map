{"version":3,"file":"order.controller.js","sourceRoot":"","sources":["../../../../src/api/order/controller/order.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport { OrderService } from \"@/api/order/service/order.service.type\";\r\n\r\nexport default class OrderController {\r\n  constructor(private readonly _orderService: OrderService) {\r\n    this.createOrder = this.createOrder.bind(this);\r\n    this.updateOrder = this.updateOrder.bind(this);\r\n    this.deleteOrder = this.deleteOrder.bind(this);\r\n    this.getOrders = this.getOrders.bind(this);\r\n    this.getOrder = this.getOrder.bind(this);\r\n  }\r\n\r\n  /** 주문 생성 */\r\n  async createOrder(req: Request, res: Response, next: NextFunction) {\r\n    try {\r\n      const order = await this._orderService.createOrder({\r\n        user_name: req.body.name,\r\n        user_tell: req.body.phone,\r\n        user_birth: req.body.birth,\r\n        user_address: req.body.address,\r\n        user_gender: req.body.gender,\r\n        user_email: req.body.email,\r\n        memo: req.body.memo,\r\n        reservation_date: req.body.date,\r\n        reservation_time: req.body.time,\r\n        status: req.body.status,\r\n        // total_price: req.body.price,\r\n        productId: req.body.productId,\r\n        select_product: req.body.select_product,\r\n        // hospitalId: req.body.id,\r\n      });\r\n      res.status(200).json(order);\r\n    } catch (error) {\r\n      console.log(error);\r\n      res.status(409).json({ message: \"주문 생성 실패\" });\r\n    }\r\n  }\r\n\r\n  /** 주문 수정 */\r\n  async updateOrder(req: Request, res: Response, next: NextFunction) {\r\n    try {\r\n      const { orderId } = req.params;\r\n      const updateData = req.body;\r\n\r\n      const order = await this._orderService.updateOrder(orderId, updateData);\r\n\r\n      res.status(200).json({\r\n        message: \"주문 수정 성공\",\r\n        data: order,\r\n      });\r\n    } catch (error) {\r\n      res.status(409).json({ message: \"주문 수정 실패\" });\r\n    }\r\n  }\r\n\r\n  /** 주문 삭제 */\r\n  async deleteOrder(req: Request, res: Response, next: NextFunction) {\r\n    try {\r\n      const { orderId } = req.params;\r\n      await this._orderService.deleteOrder(orderId);\r\n\r\n      res.status(200).json({ message: \"주문 삭제 성공\" });\r\n    } catch (error) {\r\n      res.status(404).json({ message: \"주문 삭제 실패\" });\r\n    }\r\n  }\r\n\r\n  /** 주문 조회 */\r\n  async getOrders(req: Request, res: Response, next: NextFunction) {\r\n    try {\r\n      const orders = await this._orderService.getOrders();\r\n\r\n      res.status(200).json({\r\n        message: \"주문 조회 성공\",\r\n        data: orders,\r\n      });\r\n    } catch (error) {\r\n      res.status(400).json({ message: \"주문 목록 조회 실패\" });\r\n      next(error);\r\n    }\r\n  }\r\n\r\n  /** 주문 상세 조회 */\r\n  async getOrder(req: Request, res: Response, next: NextFunction) {\r\n    try {\r\n      //   const { orderId } = req.params;\r\n      const { user_tell, email } = req.query;\r\n\r\n      //   const order = await this._orderService.getOrder(orderId);\r\n      const order = await this._orderService.getOrder(\r\n        user_tell as string,\r\n        email as string\r\n      );\r\n\r\n      res.status(200).json({\r\n        message: \"주문 조회 성공\",\r\n        data: order,\r\n      });\r\n    } catch (error) {\r\n      res.status(404).json({ message: \"주문 조회 실패\" });\r\n    }\r\n  }\r\n}\r\n"]}