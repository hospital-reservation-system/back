{"version":3,"file":"order.service.js","sourceRoot":"","sources":["../../../../src/api/order/service/order.service.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAMnE,qCAAmC;AACnC,wEAAwE;AACxE,8EAA8E;AAC9E,gFAAgF;AAEhF,MAAa,gBAAgB;IAER;IACA;IACA;IACA;IAJnB,YACmB,gBAAiC,EACjC,gBAAiC,EACjC,kBAAqC,EACrC,wBAAiD;QAHjD,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjC,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjC,uBAAkB,GAAlB,kBAAkB,CAAmB;QACrC,6BAAwB,GAAxB,wBAAwB,CAAyB;IACjE,CAAC;IAEJ,KAAK,CAAC,WAAW,CAAC,KAAwC;QACxD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAExE,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,gBAAgB,GAAG,KAAK,CAAC,cAAc;YAC3C,CAAC,CAAC,MAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;gBAC3C,MAAM,eAAe,GACnB,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC1D,IAAI,CAAC,eAAe,EAAE,CAAC;oBACrB,MAAM,IAAI,wBAAa,CACrB,GAAG,EACH,YAAY,SAAS,cAAc,CACpC,CAAC;gBACJ,CAAC;gBACD,OAAO,eAAe,CAAC;YACzB,CAAC,CAAC,CACH;YACH,CAAC,CAAC,EAAE,CAAC;QAEP,MAAM,UAAU,GACd,OAAO,CAAC,KAAK,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAExE,MAAM,QAAQ,GAAW;YACvB,EAAE,EAAE,EAAE;YACN,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,YAAY,EAAE,KAAK,CAAC,YAAY;YAChC,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;YACxC,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;YACxC,MAAM,EAAE,SAAS;YACjB,WAAW,EAAE,UAAU;YACvB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,cAAc,EAAE,KAAK,CAAC,cAAc;YACpC,kBAAkB;YAClB,4BAA4B;SAC7B,CAAC;QAEF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE3E,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM;YACnC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;YACrC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QAEjB,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE;YACrD,MAAM,EAAE,YAAY;SACrB,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,SAAS;QACb,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QACrD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,4DAA4D;IAC5D,iEAAiE;IAEjE,kBAAkB;IAClB,mDAAmD;IACnD,MAAM;IAEN,kBAAkB;IAClB,IAAI;IACJ,KAAK,CAAC,QAAQ,CAAC,SAAiB,EAAE,KAAa;QAC7C,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACjE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACxB,MAAM,IAAI,wBAAa,CACrB,GAAG,EACH,6BAA6B,CAC9B,CAAC;YACJ,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;aAAM,IAAI,KAAK,EAAE,CAAC;YACjB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC9D,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACxB,MAAM,IAAI,wBAAa,CACrB,GAAG,EACH,0BAA0B,CAC3B,CAAC;YACJ,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,WAAW,CACf,OAAe;IACf,sCAAsC;IACtC,MAA0B;QAE1B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAEhE,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QAC9C,CAAC;QAED,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEpD,OAAO;IACT,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAe;QAC/B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAEhE,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CACpD,SAAS,CAAC,UAAU,CACrB,CAAC;QAEF,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,aAAa,GAAG,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;YAC1D,OAAO,CACL,IAAI,kBAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,KAAK,IAAI,kBAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CACxE,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;QAE5E,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;CACF;AAxJD,4CAwJC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\r\nimport { OrderRepository } from \"@/api/order/repository/order.repository\";\r\nimport { AdminRepository } from \"@/api/admin/repository/admin.repository\";\r\nimport { ProductRepository } from \"@/api/product/repository/product.repository\";\r\nimport { SelectProductRepository } from \"@/api/selectProduct/repository/selectProduct.repository\";\r\nimport { OrderService } from \"@/api/order/service/order.service.type\";\r\nimport { ObjectId } from \"mongodb\";\r\n// import { OrderResponseDTO } from \"@/api/order/dto/orderResponse.dto\";\r\n// import { GetOrderResponseDTO } from \"@/api/order/dto/getOrderResponse.dto\";\r\n// import { GetOrdersResponseDTO } from \"@/api/order/dto/getOrdersResponse.dto\";\r\n\r\nexport class OrderServiceImpl implements OrderService {\r\n  constructor(\r\n    private readonly _orderRepository: OrderRepository,\r\n    private readonly _adminRepository: AdminRepository,\r\n    private readonly _productRepository: ProductRepository,\r\n    private readonly _selectProductRepository: SelectProductRepository\r\n  ) {}\r\n\r\n  async createOrder(order: Omit<IOrder, \"id\" | \"hospitalId\">): Promise<IOrder> {\r\n    const product = await this._productRepository.findById(order.productId);\r\n\r\n    if (!product) {\r\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\r\n    }\r\n\r\n    const selectedProducts = order.select_product\r\n      ? await Promise.all(\r\n          order.select_product.map(async (productId) => {\r\n            const selectedProduct =\r\n              await this._selectProductRepository.findById(productId);\r\n            if (!selectedProduct) {\r\n              throw new HttpException(\r\n                404,\r\n                `선택 상품 ID ${productId}를 찾을 수 없습니다.`\r\n              );\r\n            }\r\n            return selectedProduct;\r\n          })\r\n        )\r\n      : [];\r\n\r\n    const totalPrice =\r\n      product.price + selectedProducts.reduce((sum, p) => sum + p.price, 0);\r\n\r\n    const newOrder: IOrder = {\r\n      id: \"\",\r\n      user_name: order.user_name,\r\n      user_tell: order.user_tell,\r\n      user_birth: order.user_birth,\r\n      user_address: order.user_address,\r\n      user_gender: order.user_gender,\r\n      user_email: order.user_email,\r\n      memo: order.memo,\r\n      reservation_date: order.reservation_date,\r\n      reservation_time: order.reservation_time,\r\n      status: \"pending\",\r\n      total_price: totalPrice,\r\n      productId: order.productId,\r\n      hospitalId: product.hospitalId,\r\n      select_product: order.select_product,\r\n      // hospitalId: id,\r\n      // hospital: order.hospital,\r\n    };\r\n\r\n    const savedOrder = await this._orderRepository.save(newOrder);\r\n\r\n    const findAdmin = await this._adminRepository.findById(product.hospitalId);\r\n\r\n    if (!findAdmin) {\r\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\r\n    }\r\n\r\n    const updatedOrder = findAdmin.orders\r\n      ? findAdmin.orders.concat(savedOrder)\r\n      : [savedOrder];\r\n\r\n    await this._adminRepository.update(product.hospitalId, {\r\n      orders: updatedOrder,\r\n    });\r\n\r\n    return savedOrder;\r\n  }\r\n\r\n  async getOrders(): Promise<IOrder[]> {\r\n    const orders = await this._orderRepository.findAll();\r\n    return orders;\r\n  }\r\n\r\n  // async getOrder(orderId: string): Promise<IOrder | null> {\r\n  //   const order = await this._orderRepository.findById(orderId);\r\n\r\n  //   if (!order) {\r\n  //     throw new HttpException(404, \"예약 정보 조회 실패\");\r\n  //   }\r\n\r\n  //   return order;\r\n  // }\r\n  async getOrder(user_tell: string, email: string): Promise<IOrder[]> {\r\n    if (user_tell) {\r\n      const orders = await this._orderRepository.findByTell(user_tell);\r\n      if (orders.length === 0) {\r\n        throw new HttpException(\r\n          404,\r\n          \"해당 휴대폰 번호로 조회된 예약 내역이 없습니다.\"\r\n        );\r\n      }\r\n      return orders;\r\n    } else if (email) {\r\n      const orders = await this._orderRepository.findByEmail(email);\r\n      if (orders.length === 0) {\r\n        throw new HttpException(\r\n          404,\r\n          \"해당 이메일로 조회된 예약 내역이 없습니다.\"\r\n        );\r\n      }\r\n      return orders;\r\n    } else {\r\n      throw new HttpException(404, \"주문 정보 조회 실패\");\r\n    }\r\n  }\r\n\r\n  async updateOrder(\r\n    orderId: string,\r\n    // params: Partial<Omit<IOrder, \"id\">>\r\n    params: Omit<IOrder, \"id\">\r\n  ): Promise<void> {\r\n    const findOrder = await this._orderRepository.findById(orderId);\r\n\r\n    if (!findOrder) {\r\n      throw new HttpException(404, \"예약 정보 조회 실패\");\r\n    }\r\n\r\n    await this._orderRepository.update(orderId, params);\r\n\r\n    return;\r\n  }\r\n\r\n  async deleteOrder(orderId: string): Promise<void> {\r\n    const findOrder = await this._orderRepository.findById(orderId);\r\n\r\n    if (!findOrder) {\r\n      throw new HttpException(404, \"예약을 찾을 수 없습니다.\");\r\n    }\r\n\r\n    const findAdmin = await this._adminRepository.findById(\r\n      findOrder.hospitalId\r\n    );\r\n\r\n    if (!findAdmin) {\r\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\r\n    }\r\n\r\n    const updatedOrders = (findAdmin.orders || []).filter((p) => {\r\n      return (\r\n        new ObjectId(p.id).toString() !== new ObjectId(findOrder.id).toString()\r\n      );\r\n    });\r\n\r\n    await this._adminRepository.update(findAdmin.id, { orders: updatedOrders });\r\n\r\n    await this._orderRepository.delete(orderId);\r\n  }\r\n}\r\n"]}