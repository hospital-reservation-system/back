{"version":3,"file":"mongooseOrder.repository.js","sourceRoot":"","sources":["../../../../src/api/order/repository/mongooseOrder.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAEnE,iEAA+D;AAE/D,MAAa,uBAAuB;IAClC,KAAK,CAAC,IAAI,CAAC,KAAyB;QAClC,MAAM,QAAQ,GAAG,IAAI,4BAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,MAAM,4BAAa,CAAC,IAAI,EAAE;aACtC,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,cAAc;SACvB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,IAAI,EAAE,CAAC;QACV,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,OAAe;QAC5B,MAAM,KAAK,GAAG,4BAAa,CAAC,QAAQ,CAAC,OAAO,CAAC;aAC1C,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,cAAc;SACvB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,IAAI,EAAE,CAAC;QACV,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,SAAiB;QAChC,MAAM,KAAK,GAAG,4BAAa,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC;YACvD,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,iBAAiB;SAC1B,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,UAAkB;QAClC,MAAM,KAAK,GAAG,4BAAa,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;QACjD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CACV,OAAe,EACf,eAAmC;QAEnC,MAAM,WAAW,GAAG,MAAM,4BAAa,CAAC,iBAAiB,CACvD,OAAO,EACP,eAAe,CAChB,CAAC;QAEF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QAED,OAAO;IACT,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAe;QAC1B,MAAM,4BAAa,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;QAChD,OAAO;IACT,CAAC;CACF;AA5ED,0DA4EC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\r\nimport { OrderRepository } from \"@/api/order/repository/order.repository\";\r\nimport { MongooseOrder } from \"@/api/order/model/order.schema\";\r\n\r\nexport class MongooseOrderRepository implements OrderRepository {\r\n  async save(order: Omit<IOrder, \"id\">): Promise<IOrder> {\r\n    const newOrder = new MongooseOrder(order);\r\n    await newOrder.save();\r\n    return newOrder;\r\n  }\r\n\r\n  async findAll(): Promise<IOrder[]> {\r\n    const values = await MongooseOrder.find()\r\n      .populate({\r\n        path: \"productId\",\r\n        select: \"name price\",\r\n      })\r\n      .populate({\r\n        path: \"hospitalId\",\r\n        select: \"hospitalName\",\r\n      })\r\n      .populate({\r\n        path: \"select_product\",\r\n        select: \"name price\",\r\n      })\r\n      .exec();\r\n    return values;\r\n  }\r\n\r\n  async findById(orderId: string): Promise<IOrder | null> {\r\n    const order = MongooseOrder.findById(orderId)\r\n      .populate({\r\n        path: \"productId\",\r\n        select: \"name price\",\r\n      })\r\n      .populate({\r\n        path: \"hospitalId\",\r\n        select: \"hospitalName\",\r\n      })\r\n      .populate({\r\n        path: \"select_product\",\r\n        select: \"name price\",\r\n      })\r\n      .exec();\r\n    return order;\r\n  }\r\n\r\n  async findByTell(user_tell: string): Promise<IOrder[]> {\r\n    const order = MongooseOrder.find({ user_tell }).populate({\r\n      path: \"hospitalId\",\r\n      select: \"id hospitalName\",\r\n    });\r\n    return order;\r\n  }\r\n\r\n  async findByEmail(user_email: string): Promise<IOrder[]> {\r\n    const order = MongooseOrder.find({ user_email });\r\n    return order;\r\n  }\r\n\r\n  async update(\r\n    orderId: string,\r\n    updateOrderInfo: Omit<IOrder, \"id\">\r\n  ): Promise<void> {\r\n    const updateOrder = await MongooseOrder.findByIdAndUpdate(\r\n      orderId,\r\n      updateOrderInfo\r\n    );\r\n\r\n    if (!updateOrder) {\r\n      throw new HttpException(404, \"주문을 찾을 수 없습니다.\");\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  async delete(orderId: string): Promise<void> {\r\n    await MongooseOrder.deleteOne({ _id: orderId });\r\n    return;\r\n  }\r\n}\r\n"]}