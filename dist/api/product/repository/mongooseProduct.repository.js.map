{"version":3,"file":"mongooseProduct.repository.js","sourceRoot":"","sources":["../../../../src/api/product/repository/mongooseProduct.repository.ts"],"names":[],"mappings":";;;;;;AACA,6DAA2D;AAC3D,iEAA+D;AAC/D,4FAAmE;AAEnE,MAAa,yBAAyB;IACpC,KAAK,CAAC,IAAI,CACR,UAAkB,EAClB,MAA4B;QAE5B,MAAM,KAAK,GAAG,MAAM,4BAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QACD,MAAM,UAAU,GAAG,MAAM,IAAI,gCAAe,CAAC;YAC3C,GAAG,MAAM;YACT,UAAU,EAAE,UAAU;SACvB,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QAClC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,QAAQ,GAAG,MAAM,gCAAe,CAAC,IAAI,EAAE;aAC1C,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,0BAA0B;SACnC,CAAC;aACD,IAAI,EAAE,CAAC;QACV,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAC9D,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,SAAiB;QAC9B,MAAM,OAAO,GAAG,gCAAe,CAAC,QAAQ,CAAC,SAAS,CAAC;aAChD,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,sBAAsB;SAC/B,CAAC;aACD,IAAI,EAAE,CAAC;QACV,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAC7D,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,SAAiB,EAAE,MAA4B;QAC1D,MAAM,WAAW,GAAG,MAAM,gCAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QACD,MAAM,gCAAe,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO;IACT,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,SAAiB;QAC5B,MAAM,gCAAe,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;QACpD,OAAO;IACT,CAAC;CACF;AA3DD,8DA2DC","sourcesContent":["import { ProductRepository } from \"./product.repository\";\r\nimport { MongooseProduct } from \"../models/product.schema\";\r\nimport { MongooseAdmin } from \"@/api/admin/model/admin.schema\";\r\nimport HttpException from \"@/api/common/exceptions/http.exception\";\r\n\r\nexport class MongooseProductRepository implements ProductRepository {\r\n  async save(\r\n    hospitalId: string,\r\n    params: Omit<IProduct, \"id\">\r\n  ): Promise<IProduct> {\r\n    const admin = await MongooseAdmin.findById(hospitalId);\r\n    if (!admin) {\r\n      throw new HttpException(404, \"병원을 찾을 수 없습니다.\");\r\n    }\r\n    const newProduct = await new MongooseProduct({\r\n      ...params,\r\n      hospitalId: hospitalId,\r\n    });\r\n    const product = newProduct.save();\r\n    return product;\r\n  }\r\n\r\n  async findAll(): Promise<IProduct[]> {\r\n    const products = await MongooseProduct.find()\r\n      .populate({\r\n        path: \"selective\",\r\n        select: \"name price\",\r\n      })\r\n      .populate({\r\n        path: \"hospitalId\",\r\n        select: \"_id hospitalName address\",\r\n      })\r\n      .exec();\r\n    if (!products) throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\r\n    return products;\r\n  }\r\n\r\n  async findById(productId: string): Promise<IProduct | null> {\r\n    const product = MongooseProduct.findById(productId)\r\n      .populate({\r\n        path: \"selective\",\r\n        select: \"name price\",\r\n      })\r\n      .populate({\r\n        path: \"hospitalId\",\r\n        select: \"hospitalName address\",\r\n      })\r\n      .exec();\r\n    if (!product) throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\r\n    return product;\r\n  }\r\n\r\n  async update(productId: string, params: Omit<IProduct, \"id\">): Promise<void> {\r\n    const findProduct = await MongooseProduct.findById(productId);\r\n    if (!findProduct) {\r\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\r\n    }\r\n    await MongooseProduct.findByIdAndUpdate(productId, params);\r\n    return;\r\n  }\r\n  async delete(productId: string): Promise<void> {\r\n    await MongooseProduct.deleteOne({ _id: productId });\r\n    return;\r\n  }\r\n}\r\n"]}