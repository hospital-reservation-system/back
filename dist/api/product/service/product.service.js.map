{"version":3,"file":"product.service.js","sourceRoot":"","sources":["../../../../src/api/product/service/product.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\r\nimport { ProductRepository } from \"../repository/product.repository\";\r\nimport { AdminRepository } from \"@/api/admin/repository/admin.repository\";\r\nimport { ProductService } from \"./product.service.type\";\r\nimport { ObjectId } from 'mongodb';\r\n\r\nexport class ProductServiceImpl implements ProductService {\r\n  private readonly _productRepository: ProductRepository;\r\n  private readonly _adminRepository: AdminRepository;\r\n  constructor(productRepository: ProductRepository, adminRepository: AdminRepository) {\r\n    this._productRepository = productRepository;\r\n    this._adminRepository = adminRepository;\r\n  }\r\n\r\n  async createProduct(\r\n    hospitalId: string,\r\n    product: Omit<IProduct, \"id\">\r\n  ): Promise<IProduct> {\r\n    \r\n    const findAdmin = await this._adminRepository.findById(hospitalId);\r\n\r\n    if (!findAdmin) {\r\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\r\n    }\r\n\r\n    const newProduct: IProduct = {\r\n      name: product.name,\r\n      price: product.price,\r\n      description: product.description,\r\n      selective: product.selective,\r\n      hospitalId: hospitalId,\r\n    }\r\n\r\n    const savedProduct = await this._productRepository.save(hospitalId, newProduct);\r\n\r\n    const updateProducts = findAdmin.products\r\n    ? findAdmin.products.concat(savedProduct)\r\n    : [savedProduct];\r\n  \r\n    await this._adminRepository.update(hospitalId, { products: updateProducts });\r\n  \r\n    return newProduct;\r\n  }\r\n  async getProducts(): Promise<IProduct[]> {\r\n    const products = await this._productRepository.findAll();\r\n    return products;\r\n  }\r\n  async getProductById(productId: string): Promise<IProduct> {\r\n    const product = await this._productRepository.findById(productId);\r\n    if (!product) {\r\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\r\n    }\r\n    return product;\r\n  }\r\n  async updateProduct(\r\n    productId: string,\r\n    product: IProduct\r\n  ): Promise<void> {\r\n    const productToUpdate: Omit<IProduct, \"id\"> = {\r\n      ...product,\r\n      description: product.description || \"\",\r\n    };\r\n    await this._productRepository.update(productId, productToUpdate);\r\n\r\n    return;\r\n  }\r\n  async deleteProduct(hospitalId: string, productId: string): Promise<void> {\r\n    const findAdmin = await this._adminRepository.findById(hospitalId);\r\n    if (!findAdmin) {\r\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\r\n    }\r\n  \r\n    const product = await this._productRepository.findById(productId);\r\n    if (!product) {\r\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\r\n    }\r\n    \r\n    const updatedProducts = (findAdmin.products || []).filter((p) => {\r\n      return new ObjectId(p.id).toString() !== new ObjectId(productId).toString();\r\n    });\r\n\r\n    await this._adminRepository.update(hospitalId, { products: updatedProducts });\r\n\r\n    await this._productRepository.delete(productId);\r\n  \r\n  }\r\n}"]}