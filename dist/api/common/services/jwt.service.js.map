{"version":3,"file":"jwt.service.js","sourceRoot":"","sources":["../../../../src/api/common/services/jwt.service.ts"],"names":[],"mappings":";;;;;;AAAA,gEAA+B;AAW/B,MAAa,UAAU;IACrB,MAAM,CAAU,mBAAmB,GACjC,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,QAAQ,CAAC;IAC9C,MAAM,CAAU,oBAAoB,GAClC,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,SAAS,CAAC;IAEhD,gBAAgB;IAChB,MAAM,CAAC,iBAAiB,CAAC,KAAa;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAExC,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAmB,CAAC;IACrD,CAAC;IAED,iBAAiB;IACjB,MAAM,CAAC,kBAAkB,CAAC,KAAa;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAEzC,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAmB,CAAC;IACrD,CAAC;IAED,gBAAgB;IAChB,MAAM,CAAC,mBAAmB,CAAC,MAAc;QACvC,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEpB,OAAO,sBAAG,CAAC,IAAI,CACb,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,UAAU,EAAE,EAChC,IAAI,CAAC,mBAAmB,EACxB;YACE,SAAS,EAAE,SAAS,IAAI,IAAI;SAC7B,CACF,CAAC;IACJ,CAAC;IAED,iBAAiB;IACjB,MAAM,CAAC,oBAAoB,CAAC,MAA4B;QACtD,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;QACjC,OAAO,sBAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,oBAAoB,EAAE;YACjD,SAAS,EAAE,SAAS,IAAI,KAAK;SAC9B,CAAC,CAAC;IACL,CAAC;;AAxCH,gCAyCC","sourcesContent":["import jwt from \"jsonwebtoken\";\r\n\r\ntype Params = {\r\n  /** ID */\r\n  id: string;\r\n  /** 역할 */\r\n  role?: role;\r\n  /** 만료 시간 */\r\n  expiresIn?: string;\r\n};\r\n\r\nexport class JwtService {\r\n  static readonly ACCESS_TOKEN_SECRET =\r\n    process.env.ACCESS_TOKEN_SECRET || \"access\";\r\n  static readonly REFRESH_TOKEN_SECRET =\r\n    process.env.REFRESH_TOKEN_SECRET || \"refresh\";\r\n\r\n  /** 엑세스 토큰 검증 */\r\n  static verifyAccessToken(token: string) {\r\n    const secret = this.ACCESS_TOKEN_SECRET;\r\n\r\n    return jwt.verify(token, secret) as jwt.JwtPayload;\r\n  }\r\n\r\n  /** 리프레시 토큰 검증 */\r\n  static verifyRefreshToken(token: string) {\r\n    const secret = this.REFRESH_TOKEN_SECRET;\r\n\r\n    return jwt.verify(token, secret) as jwt.JwtPayload;\r\n  }\r\n\r\n  /** 엑세스 토큰 발행 */\r\n  static generateAccessToken(params: Params) {\r\n    const { id, expiresIn, role } = params;\r\n    console.log(params);\r\n\r\n    return jwt.sign(\r\n      { id, role: role ?? \"hospital\" },\r\n      this.ACCESS_TOKEN_SECRET,\r\n      {\r\n        expiresIn: expiresIn || \"1h\",\r\n      }\r\n    );\r\n  }\r\n\r\n  /** 리프레시 토큰 발행 */\r\n  static generateRefreshToken(params: Omit<Params, \"role\">) {\r\n    const { id, expiresIn } = params;\r\n    return jwt.sign({ id }, this.REFRESH_TOKEN_SECRET, {\r\n      expiresIn: expiresIn || \"14d\",\r\n    });\r\n  }\r\n}\r\n"]}