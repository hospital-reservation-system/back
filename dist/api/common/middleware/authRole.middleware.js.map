{"version":3,"file":"authRole.middleware.js","sourceRoot":"","sources":["../../../../src/api/common/middleware/authRole.middleware.ts"],"names":[],"mappings":";;;;;;AACA,kFAAyD;AACzD,yDAAqD;AAErD,mBAAmB;AACZ,MAAM,kBAAkB,GAAG,CAAC,KAAa,EAAE,EAAE;IAClD,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACzD,IAAI,CAAC;YACH,kBAAkB;YAClB,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;YAExC,oBAAoB;YACpB,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAC5C,CAAC;YAED,oBAAoB;YACpB,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAE7C,oBAAoB;YACpB,MAAM,OAAO,GAAG,wBAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEzD,wBAAwB;YAExB,oBAAoB;YACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;gBAClC,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAC5C,CAAC;YAED,GAAG,CAAC,KAAK,GAAG;gBACV,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,IAAI,EAAE,OAAO,CAAC,IAAI;aACnB,CAAC;YAEF,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CACF,IAAI,wBAAa,CAAC,KAAK,CAAC,UAAU,IAAI,GAAG,EAAE,SAAS,KAAK,CAAC,OAAO,EAAE,CAAC,CACrE,CAAC;QACJ,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,kBAAkB,sBAoC7B","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport HttpException from \"../exceptions/http.exception\";\r\nimport { JwtService } from \"../services/jwt.service\";\r\n\r\n/** 인증 & 인가 미들웨어 */\r\nexport const authRoleMiddleware = (roles: role[]) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      // 헤더에서 토큰을 가져옵니다.\r\n      const token = req.headers.authorization;\r\n\r\n      // 토큰이 없으면 에러를 던집니다.\r\n      if (!token) {\r\n        throw new HttpException(401, \"토큰이 없습니다.\");\r\n      }\r\n\r\n      // 토큰에서 페이로드를 가져옵니다.\r\n      const tokenValue = token.split(\"Bearer \")[1];\r\n\r\n      // 페이로드에서 역할을 확인합니다.\r\n      const payload = JwtService.verifyAccessToken(tokenValue);\r\n\r\n      // console.log(payload);\r\n\r\n      // 역할이 없으면 에러를 던집니다.\r\n      if (!roles.includes(payload.role)) {\r\n        throw new HttpException(403, \"권한이 없습니다.\");\r\n      }\r\n\r\n      req.admin = {\r\n        id: payload.id,\r\n        role: payload.role,\r\n      };\r\n\r\n      next();\r\n    } catch (error: any) {\r\n      next(\r\n        new HttpException(error.statusCode ?? 401, `인증 실패 ${error.message}`)\r\n      );\r\n    }\r\n  };\r\n};\r\n"]}