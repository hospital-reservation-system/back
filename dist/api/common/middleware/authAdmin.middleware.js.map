{"version":3,"file":"authAdmin.middleware.js","sourceRoot":"","sources":["../../../../src/api/common/middleware/authAdmin.middleware.ts"],"names":[],"mappings":";;;;;;AACA,kFAAyD;AACzD,yDAAqD;AAErD,cAAc;AACP,MAAM,mBAAmB,GAAG,CACjC,GAAY,EACZ,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAExC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7C,MAAM,OAAO,GAAG,wBAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QACzD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,GAAG,CAAC,KAAK,GAAG;YACV,EAAE,EAAE,OAAO,CAAC,EAAE;YACd,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC;QAEF,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,wBAAa,CAAC,GAAG,EAAE,SAAS,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;AACH,CAAC,CAAC;AAzBW,QAAA,mBAAmB,uBAyB9B","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport HttpException from \"../exceptions/http.exception\";\r\nimport { JwtService } from \"../services/jwt.service\";\r\n\r\n/** 인증 미들웨어 */\r\nexport const authAdminMiddleware = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    const token = req.headers.authorization;\r\n\r\n    if (!token) {\r\n      throw new HttpException(401, \"토큰이 없습니다.\");\r\n    }\r\n\r\n    const tokenValue = token.split(\"Bearer \")[1];\r\n\r\n    const payload = JwtService.verifyAccessToken(tokenValue);\r\n    console.log(payload);\r\n    req.admin = {\r\n      id: payload.id,\r\n      role: payload.role,\r\n    };\r\n\r\n    next();\r\n  } catch (error: any) {\r\n    next(new HttpException(401, `인증 실패 ${error.message}`));\r\n  }\r\n};\r\n"]}