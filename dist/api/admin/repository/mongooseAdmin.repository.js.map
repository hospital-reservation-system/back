{"version":3,"file":"mongooseAdmin.repository.js","sourceRoot":"","sources":["../../../../src/api/admin/repository/mongooseAdmin.repository.ts"],"names":[],"mappings":";;;;;;AACA,iEAA+D;AAC/D,4FAAmE;AAEnE,MAAa,uBAAuB;IAClC,mCAAmC;IACnC,KAAK,CAAC,IAAI,CAAC,KAAyB;QAClC,MAAM,QAAQ,GAAG,IAAI,4BAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,8BAA8B;IAC9B,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,MAAM,4BAAa,CAAC,IAAI,EAAE;aACtC,QAAQ,CACP;YACE,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,mCAAmC;SAC5C,CACF;aACA,QAAQ,CACP;YACE,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,8DAA8D;SACvE,CACF;aACA,QAAQ,CACP;YACE,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,wBAAwB;SACjC,CACF;aACA,IAAI,EAAE,CAAC;QACV,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,KAAK,GAAG,MAAM,4BAAa,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC3C,QAAQ,CACP;YACE,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,mCAAmC;SAC5C,CACF;aACA,QAAQ,CACP;YACE,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,8DAA8D;SACvE,CACF;aACA,QAAQ,CACP;YACE,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,wBAAwB;SACjC,CACF;aACA,IAAI,EAAE,CAAC;QACV,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACrD,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,eAAuB;QAC9C,+DAA+D;QAC/D,eAAe;QACf,MAAM;QAEN,MAAM,4BAAa,CAAC,iBAAiB,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC,IAAI,EAAE,CAAC;QAElE,OAAO;IACT,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,4BAAa,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3C,OAAO;IACT,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,MAAM,SAAS,GAAG,MAAM,4BAAa,CAAC,OAAO,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;QACvD,OAAO,SAAS,IAAI,IAAI,CAAC;IAC3B,CAAC;CACF;AAlFD,0DAkFC","sourcesContent":["import { AdminRepository } from \"@/api/admin/repository/admin.repository\";\r\nimport { MongooseAdmin } from \"@/api/admin/model/admin.schema\";\r\nimport HttpException from \"@/api/common/exceptions/http.exception\";\r\n\r\nexport class MongooseAdminRepository implements AdminRepository {\r\n  /** 회원가입(role = admin, hospital) */\r\n  async save(admin: Omit<IAdmin, \"id\">): Promise<IAdmin> {\r\n    const newAdmin = new MongooseAdmin(admin);\r\n    await newAdmin.save();\r\n    return newAdmin;\r\n  }  \r\n\r\n  /** 관리자 전체 조회(role = admin) */\r\n  async findAll(): Promise<IAdmin[]> {\r\n    const admins = await MongooseAdmin.find()\r\n      .populate(\r\n        {\r\n          path: \"products\",\r\n          select: \"name price description hospitalId\",\r\n        }\r\n      )\r\n      .populate(\r\n        {\r\n          path: \"orders\",\r\n          select: \"user_name user_tell memo productId hospitalId select_product\",\r\n        }\r\n      )\r\n      .populate(\r\n        {\r\n          path: \"selectProducts\",\r\n          select: \"name price description\",\r\n        }\r\n      )\r\n      .exec();\r\n    return admins;\r\n  }\r\n\r\n  /** 관리자 조회(role = admin) */\r\n  async findById(id: string): Promise<IAdmin | null> {\r\n    const admin = await MongooseAdmin.findById(id)\r\n      .populate(\r\n        {\r\n          path: \"products\",\r\n          select: \"name price description hospitalId\",\r\n        }\r\n      )\r\n      .populate(\r\n        {\r\n          path: \"orders\",\r\n          select: \"user_name user_tell memo productId hospitalId select_product\",\r\n        }\r\n      )\r\n      .populate(\r\n        {\r\n          path: \"selectProducts\",\r\n          select: \"name price description\",\r\n        }\r\n      )\r\n      .exec();\r\n    if (!admin) {\r\n      throw new HttpException(404, \"해당 관리자를 찾을 수 없습니다.\");\r\n    }\r\n    return admin;\r\n  }\r\n\r\n  /** 관리자 수정(role = admin) */\r\n  async update(id: string, updateAdminInfo: IAdmin): Promise<void> {\r\n    // await MongooseAdmin.findByIdAndUpdate(id, updateAdminInfo, {\r\n    //   new: true,\r\n    // });\r\n\r\n    await MongooseAdmin.findByIdAndUpdate(id, updateAdminInfo).exec();\r\n\r\n    return;\r\n  }\r\n\r\n  /** 관리자 삭제(role = admin) */\r\n  async delete(id: string): Promise<void> {\r\n    await MongooseAdmin.deleteOne({ _id: id });\r\n    return;\r\n  }\r\n\r\n  async findByEmail(email: string): Promise<IAdmin | null> {\r\n    const findAdmin = await MongooseAdmin.findOne({email});        \r\n    return findAdmin ?? null;\r\n  }\r\n}\r\n"]}